1. Complete the method/function so that it converts dash/underscore delimited words into camel casing.
     The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, 
     also often referred to as Pascal case). The next words should be always capitalized.
    Examples

    "the-stealth-warrior" gets converted to "theStealthWarrior"

    "The_Stealth_Warrior" gets converted to "TheStealthWarrior"

    "The_Stealth-Warrior" gets converted to "TheStealthWarrior"

2. Return the number (count) of vowels in the given string.

    We will consider a, e, i, o, u as vowels for this Kata (but not y).

    The input string will only consist of lower case letters and/or spaces.

3. You are going to be given an array of integers. 
    Your job is to take that array and find an index N where the sum of the integers 
    to the left of N is equal to the sum of the integers to the right of N. If there is no
    index that would make this happen, return -1.
    For example:

    Let's say you are given the array {1,2,3,4,3,2,1}:
    Your function will return the index 3, because at the 3rd position of the array, 
    the sum of left side of the index ({1,2,3}) and the sum of the right side of the index ({3,2,1}) both equal 6.

    Let's look at another one.
    You are given the array {1,100,50,-51,1,1}:
    Your function will return the index 1, because at the 1st position of the array,
    the sum of left side of the index ({1}) and the sum of the right side of the index ({50,-51,1,1}) both equal 1.

    Last one:
    You are given the array {20,10,-80,10,10,15,35}
    At index 0 the left side is {}
    The right side is {10,-80,10,10,15,35}
    They both are equal to 0 when added. (Empty arrays are equal to 0 in this problem)
    Index 0 is the place where the left side and right side are equal.

    Note: Please remember that in most languages the index of an array starts at 0.
    Input

    An integer array of length 0 < arr < 1000. The numbers in the array can be any integer positive or negative.
    Output

    The lowest index N where the side to the left of N is equal to the side to the right of N.
    If you do not find an index that fits these rules, then you will return -1.
    Note

    If you are given an array with multiple answers, return the lowest correct index.

4. Your task is to write a function which returns the sum of a sequence of integers.

The sequence is defined by 3 non-negative values: begin, end, step.

If begin value is greater than the end, your function should return 0. If end is not the result of an integer number of steps, then don't add it to the sum. See the 4th example below.

Examples

2,2,2 --> 2
2,6,2 --> 12 (2 + 4 + 6)
1,5,1 --> 15 (1 + 2 + 3 + 4 + 5)
1,5,3  --> 5 (1 + 4)

This is the first kata in the series:

    Sum of a sequence (this kata)
    Sum of a Sequence [Hard-Core Version]


6. Description:

As the title suggests, this is the hard-core version of another neat kata.

The task is simple to explain: simply sum all the numbers from the first parameter being the beginning to the second parameter being the upper limit (possibly included), going in steps expressed by the third parameter:

sequenceSum(2,2,2) === 2
sequenceSum(2,6,2) === 12 // 2 + 4 + 6
sequenceSum(1,5,1) === 15 // 1 + 2 + 3 + 4 + 5
sequenceSum(1,5,3) === 5 // 1 + 4

If it is an impossible sequence (with the beginning being larger the end and a positive step or the other way around), just return 0. See the provided test cases for further examples :)

Note: differing from the other base kata, much larger ranges are going to be tested, so you should hope to get your algo optimized and to avoid brute-forcing your way through the solution.

7. As a part of this Kata, you need to create a function that when provided with a triplet, returns the index of the numerical element that lies between the other two elements.

The input to the function will be an array of three distinct numbers (Haskell: a tuple).

For example:

gimme([2, 3, 1]) => 0

2 is the number that fits between 1 and 3 and the index of 2 in the input array is 0.

Another example (just to make sure it is clear):

gimme([5, 10, 14]) => 1

10 is the number that fits between 5 and 14 and the index of 10 in the input array is 1.



The drawing below gives an idea of how to cut a given "true" rectangle into squares ("true" rectangle meaning that the two dimensions are different).

alternative text
https://www.codewars.com/kata/55466989aeecab5aac00003e/train/go

Can you translate this drawing into an algorithm?

You will be given two dimensions

    a positive integer length
    a positive integer width

You will return a collection or a string (depending on the language; Shell bash,
 PowerShell, Pascal and Fortran return a string) with the size of each of the squares.
Examples in general form:

(depending on the language)

  sqInRect(5, 3) should return [3, 2, 1, 1]
  sqInRect(3, 5) should return [3, 2, 1, 1]
  
  You can see examples for your language in **"SAMPLE TESTS".**

Notes:

    lng == wdth as a starting case would be an entirely different problem and the drawing is planned to be interpreted with lng != wdth.
     (See kata, Square into Squares.
     Protect trees! http://www.codewars.com/kata/54eb33e5bc1a25440d000891 for this problem).

    When the initial parameters are so that lng == wdth, the solution [lng] would be the most obvious but not in the spirit of this kata so, 
    in that case, return None/nil/null/Nothing or return {} with C++, Array() with Scala, [] with Perl, Raku.

    In that case the returned structure of C will have its sz component equal to 0.

    Return the string "nil" with Bash, PowerShell, Pascal and Fortran.

Fundamentals
Geometry
Puzzles


Q8. Instructions

In this little assignment you are given a string of space separated numbers,
 and have to return the highest and lowest number.
Examples

HighAndLow("1 2 3 4 5")  // return "5 1"
HighAndLow("1 2 -3 4 5") // return "5 -3"
HighAndLow("1 9 3 4 -5") // return "9 -5"

Notes

    All numbers are valid Int32, no need to validate them.
    There will always be at least one number in the input string.
    Output string must be two numbers separated by a single space, and highest number is first.


Solution

package kata3

func HighAndLow(in string) string {

  // Code here or

  return "throw towel"

}



